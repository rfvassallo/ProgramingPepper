<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Python Script" id="2" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="379" y="15"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tablet = ALProxy( "ALTabletService")
        self.tts = ALProxy("ALTextToSpeech")
        #self.tts.say("Loading behavior....")


    def onLoad(self):
        #put initialization code here
        self.BIND_PYTHON(self.getName(), "imageNum")
        #self.onShowImage()


    def onUnload(self):
        #put clean-up code here
        self.tablet.hideImage()
        #self.tts.say("Hiding image....")

    def _getAbsoluteUrl(self, partial_url):
        import os
        subPath = os.path.join(self.packageUid(), os.path.normpath(partial_url).lstrip("\\/"))
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        return "http://%s/apps/%s" %(self.tablet.robotIp(), subPath.replace(os.path.sep, "/"))


    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        #self.onStopped() #activate the output of the box
        #self.tablet.turnScreenOn(False)
        #self.tts.say("Trying to stop tablet")
        self.urlList = {0:"SmartInternetLab_Logo.png",
                        1:"first_image.png",
                        2:"5G.png",
                        3:"5G_differences01.png",
                        4:"5G_differences02.png",
                        5:"test_network.png",
                        6:"DCMS.png",
                        7:"LayeredRealities5G-1.png",
                        8:"LayeredRealities5G-2.png",
                        9:"LayeredRealities5G-3.png",
                        10:"lixo.png",
                        11:"lixo.png",
                        12:"lixo.png",
                        13:"lixo.png",
                        14:"The-Watershed.png",
                        15:"WECA.png",
                        16:"we-the-curious.png",
                        17:"Dimitra.png",
                        18:"Margot_James.png",
                        19:"Tim-Bowles.png",
                        20:"testbeds_trials.png",
                        21:"smart_tourism.png",
                        22:"demos.png",
                        23:"5GUK_exchange.png",
                        24:"smart_city_safety.png",
                        25:"massive_mimo.png",
                        26:"5G_box.png",
                        27:"visualisation_waves.png",
                        28:"autonomous_vehicle.png",
                        29:"economic_benefits.png"
                        }


    def onInput_imageNum(self,value):

        value = int(value)

        url=self.urlList[value]
        '''
        if value==0:
            url = "SmartInternetLab_Logo.png"
        elif value ==1:
            url = "5G_testbeds.png"
        else:
            url = "main.png"
        '''
        #self.tts.say("I will show image"+str(value))

        url = self._getAbsoluteUrl(url)
        #self.tablet.turnScreenOn(True)
        self.tablet.showImage(url)
        #self.tts.say("Loading image....")
        #pass


    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="imageNum" type="2" type_size="1" nature="1" inner="0" tooltip="" id="4" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" /></Box><Box name="Tablet Touch" id="10" localization="8" tooltip="Sends an event when the tablet is touched&#x0A;&#x0A;V1.0.1&#x0A;" x="352" y="244"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[

class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.isRunning = False
        self.tabletService = None
        self.connectId = None
        self.currentTopic = 0
        self.previousTopic = 0
        self.tts = ALProxy("ALTextToSpeech")

    def onUnload(self):
        if self.tabletService:
            self.disconnectListener()
            self.isRunning = False

    def disconnectListener(self):
        if self.connectId:
            try:
                self.tabletService.onTouch.disconnect(self.connectId)
                self.connectId = None
            except Exception as e:
                self.logger.error(e)

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def  onInput_onStart(self):
        if self.isRunning:
            return # already running, nothing to do
        self.isRunning = True
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        self.tabletService = self._getTabletService()
        if self.tabletService:
            try:
                if not self.connectId:
                    if self.getParameter("Action") == "On touch move":
                        self.connectId = self.tabletService.onTouchMove.connect(self.touchCallback)
                    elif self.getParameter("Action") == "On touch down":
                        self.connectId = self.tabletService.onTouchDown.connect(self.touchCallback)
                    elif self.getParameter("Action") == "On touch up":
                        self.connectId = self.tabletService.onTouchUp.connect(self.touchCallback)
            except Exception as err:
                self.logger.warning("Error during subscribe: %s " % err)
        else:
            self.logger.info("No ALTabletService, can't play listen for touch.")

    def touchCallback(self, x, y):

        #text = "you touched x ="+str(x)+"and y="+str(y)
        #self.tts.say (text)

        if (88 <= x <= 510) and (110 <= y <= 160) and self.currentTopic ==22: #5G Exchange
            self.nextTopic (23)

        elif (88 <= x <= 575) and (220 <= y <= 270) and self.currentTopic ==22: #next topic Smart City Safety
            self.nextTopic (24)

        elif (88 <= x <= 485) and (335 <= y <= 385) and self.currentTopic ==22: #next topic Massive Mimo
            self.nextTopic (25)

        elif (88 <= x <= 400) and (450 <= y <= 500) and self.currentTopic ==22:  #next Topic Autonomous Cars
            self.nextTopic (28)

        elif (88 <= x <= 1100) and (555 <= y <= 605) and self.currentTopic ==22: #next topic RF Spectral Waves
            self.nextTopic (27)

        elif (88 <= x <= 1100) and (680 <= y <= 730) and self.currentTopic ==22: #next topic %G in a Box
            self.nextTopic (26)


        self.onTouched([x, y])

    def onInput_currentTopic(self,value):
        self.currentTopic = int(value)

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="currentTopic" type="0" type_size="1" nature="1" inner="0" tooltip="" id="4" /><Output name="onTouched" type="0" type_size="1" nature="2" inner="0" tooltip="Send [x,y] position for one touch" id="5" /><Output name="nextTopic" type="0" type_size="1" nature="2" inner="0" tooltip="" id="6" /><Parameter name="Action" inherits_from_parent="0" content_type="3" value="On touch down" default_value="On touch move" custom_choice="0" tooltip="Type of touch you want on the tablet." id="7"><Choice value="On touch move" /><Choice value="On touch down" /><Choice value="On touch up" /></Parameter></Box><Box name="SmartLab" id="3" localization="8" tooltip="" x="196" y="85"><dialogFile>../SmartLab/SmartLab.dlg</dialogFile><bitmap>media/images/box/box-dialog.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="onTopic" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" /><Input name="onTouch" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" /><Output name="showImage" type="2" type_size="1" nature="2" inner="0" tooltip="" id="7" /><Output name="startTouch" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" /><Output name="stopTouch" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" /></Box><Box name="speechConfidence" id="1" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="66" y="19"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.dialogService = ALProxy("ALDialog")

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        self.dialogService.setConfidenceThreshold("BNF", 0.45)
        self.dialogService.setConfidenceThreshold("SLM", 0.45)
        self.dialogService.setConfidenceThreshold("REMOTE", 0.45)
        self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="5" /><Link inputowner="2" indexofinput="3" outputowner="3" indexofoutput="6" /><Link inputowner="2" indexofinput="4" outputowner="3" indexofoutput="7" /><Link inputowner="10" indexofinput="4" outputowner="3" indexofoutput="7" /><Link inputowner="10" indexofinput="2" outputowner="3" indexofoutput="8" /><Link inputowner="10" indexofinput="3" outputowner="3" indexofoutput="9" /><Link inputowner="3" indexofinput="4" outputowner="10" indexofoutput="6" /><Link inputowner="3" indexofinput="5" outputowner="10" indexofoutput="5" /><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="4" /><Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>