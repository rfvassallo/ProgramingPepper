<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="follow" id="1" localization="8" tooltip="" x="249" y="66"><dialogFile>../follow/follow.dlg</dialogFile><bitmap>media/images/box/box-dialog.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="onTargetLost" type="1" type_size="1" nature="1" inner="0" tooltip="Bang Intput to notify the target was lost" id="4" /><Input name="onTargetReached" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" /><Output name="onFollow" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" /></Box><Box name="myTracker" id="3" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="251" y="225"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[#import qi

class MyClass(GeneratedClass):
    def __init__(self):

        # Services needed
        GeneratedClass.__init__(self)
        self.tracker = ALProxy( "ALTracker" )
        self.memory = ALProxy("ALMemory")
        self.tts = ALProxy("ALTextToSpeech")
        self.motion = ALProxy("ALMotion")

        #self.posture = ALProxy("ALRobotPosture")
        #self.navigation = ALProxy("ALNavigation")



        # Set target type and parameters
        self.peopleId = []
        self.targetName = "People"
        self.mode = "Move"

        self.distanceX = 0.50
        self.distanceY = 0.0
        self.angleWz = 0.0
        self.thresholdX = 0.1
        self.thresholdY = 0.1
        self.thresholdWz = 0.3
        self.effector = "None"



        # Control variables
        self.lostCount=-1
        self.reachCount=0
        self.isRunning = False
        self.alreadyTracking = False
        self.subscribeDone = None







    def onLoad(self):
        #put initialization code here
        self.BIND_PYTHON(self.getName(), "onTargetLost")
        self.BIND_PYTHON(self.getName(), "onTargetReached")
        self.BIND_PYTHON(self.getName(), "onTargetDetected")
        #pass



    def onUnload(self):
        #put clean-up code here


        if self.isRunning:
            self.tracker.setEffector("None")
            self.tracker.stopTracker()
            self.tracker.unregisterTarget(self.targetName)
            self.isRunning = False

        if self.subscribeDone:
            self.memory.unsubscribeToEvent("ALTracker/TargetLost", self.getName())
            self.memory.unsubscribeToEvent("ALTracker/TargetReached", self.getName())
            self.memory.unsubscribeToEvent("ALTracker/TargetDetected", self.getName())
            self.subscribeDone = False

        self.onStopped() #activate the output of the box

    def onInput_onStart(self):

        # List the events related to the tracker
        '''
        eventList = self.memory.getEventList()
        trackerEventsList = filter(lambda x: x.startswith("ALTracker"), eventList)
        self.logMessage(trackerEventsList)
        '''

        self.memory.subscribeToEvent("ALTracker/TargetLost", self.getName(), "onTargetLost")
        self.memory.subscribeToEvent("ALTracker/TargetReached", self.getName(), "onTargetReached")
        self.memory.subscribeToEvent("ALTracker/TargetDetected", self.getName(), "onTargetDetected")

        #self.subscriberTargetLost= self.memory.subscriber("ALTracker/TargetLost")
        #self.subscriberTargetLost.signal.connect(self.onTargetLost)

        #self.subscriberTargetReached= self.memory.subscriber("ALTracker/TargetReached")
        #self.subscriberTargetReached.signal.connect(self.onTargetReached)

        self.subscribeDone = True

        #self.tts.say("Subscribed to events")


        # Configure if robot hand will move or not
        self.tracker.setEffector(self.effector)

        # Register target
        self.tracker.registerTarget(self.targetName, self.peopleId)

        # Set relative position for tracker
        self.tracker.setRelativePosition([-self.distanceX, self.distanceY, self.angleWz,
                                           self.thresholdX, self.thresholdY, self.thresholdWz])
        # Set tracking mode
        self.tracker.setMode(self.mode)

        # Start tracker
        self.tracker.track(self.targetName) #Start tracker
        self.isRunning = True
        self.tts.say("I am ready to follow you. When we are done, please tell me to stop.")

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped



    def onTargetLost(self, key, value, message):

        #self.tts.say("Target Lost")

        if self.lostCount == 2 :
            self.targetLost()
            self.lostCount = 0
            self.tts.say("I just lost you. Please come closer or tell me to stop")
        else:
            self.lostCount +=1

    def onTargetDetected(self, key, value, message):

        #self.tts.say("I can see you")
        pass


    def onTargetReached(self, key, value, message):

        if self.reachCount == 4:

            self.targetReached()
            self.tts.say("Do you want me to keep following you? If not, please tell me to stop.")
            self.reachCount = 0
        else:

            self.reachCount +=1]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="targetLost" type="1" type_size="1" nature="2" inner="0" tooltip="Indicates when the tracker lost the target" id="5" /><Output name="targetReached" type="1" type_size="1" nature="2" inner="0" tooltip="Indicates when the robot is at the desired relative position" id="6" /><Output name="logMessage" type="0" type_size="1" nature="2" inner="0" tooltip="" id="7" /></Box><Box name="Log" id="2" localization="8" tooltip="Prompt the message in the debug window. You can set a prefix and a priority&#x0A;for the message in the parameters." x="491" y="289"><bitmap>media/images/box/print.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_message(self, p):
        sPriority = self.getParameter("Priority")
        sMessage = self.getParameter("Message prefix")
        if( sMessage != "" and p != None ):
            sMessage += ": "
        if( p != None ):
            sMessage += str(p)
        if( sPriority == "Fatal" ):
            self.logger.fatal( sMessage )
        elif( sPriority == "Error" ):
            self.logger.error( sMessage )
        elif( sPriority == "Warning" ):
            self.logger.warning( sMessage )
        elif( sPriority == "Info" ):
            self.logger.info( sMessage )
        elif( sPriority == "Debug" ):
            self.logger.debug( sMessage )
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="message" type="0" type_size="1" nature="1" inner="0" tooltip='The message to print or a &quot;Bang&quot; to only print the message set as parameter.' id="2" /><Output name="onDone" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /><Parameter name="Message prefix" inherits_from_parent="0" content_type="3" value="Message text" default_value="Message text" custom_choice="0" tooltip="Enter the text you want to print before the input message." id="4" /><Parameter name="Priority" inherits_from_parent="0" content_type="3" value="Fatal" default_value="Info" custom_choice="0" tooltip="Enter the priority of your message. If you select error, the box will get red when it will be stimulated." id="5"><Choice value="Fatal" /><Choice value="Error" /><Choice value="Warning" /><Choice value="Info" /><Choice value="Debug" /></Parameter></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="7" /><Link inputowner="3" indexofinput="3" outputowner="1" indexofoutput="6" /><Link inputowner="1" indexofinput="4" outputowner="3" indexofoutput="5" /><Link inputowner="0" indexofinput="4" outputowner="3" indexofoutput="4" /><Link inputowner="2" indexofinput="2" outputowner="3" indexofoutput="7" /><Link inputowner="1" indexofinput="5" outputowner="3" indexofoutput="6" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>